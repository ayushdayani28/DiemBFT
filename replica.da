from platform import node
from socket import timeout
import sys
from _typeshed import Self
from threading import Timer
from time import time
from diembft.mem_pool.memPoolHelper import MemPoolHelper
from diembft import main as Main, messages
from diembft.messages import voteMsg
from diembft.pacemaker.pacemaker import Pacemaker
from diembft.utilities.generateKeys import GenerateKeys
from diembft.messages.proposalMsg import ProposalMsg
from diembft.messages.timeOutMessage import TimeOutMessage
from diembft.messages.voteMsg import VoteMsg
    

class Replica(process):

    def setup(nodes: set, node_id: str, mapper:dict, keys: list, config):

        self.mapper = mapper
        self.nodes = nodes  
        self.node_id = node_id
        self.mem_pool = MemPoolHelper()
        self.main = Main(
            self.mapper,
            self.nodes,
            self.node_id,
            keys,
            config.timer_constant,
            self.mem_pool
        )
        self.round_done = False

    
    def run():
        
        local_timeout()

    
    def local_timeout():
        
        run_done = False

        while not run_done:

            self.round_done = False

            timer_duration = self.main.pacemaker.get_round_timer(self.main.pacemaker.current_round) 

            if await(self.round_done):
                pass
            
            elif timeout(timer_duration):
                timeout_msg = self.main.pacemaker.local_timeout_round()
                # broadcast to all the nodes
                send(('message', timeout_msg), to = nodes)


    def receive(msg=('client_message', client_message), from_=client_node):
        self.mem_pool.put_message(client_message)

    def receive(msg=('message',message), from_=node):

        if type(message) == ProposalMsg:

            vote_msg,leader = self.main.process_proposal_msg(message)

            if vote_msg is not None:

                #set round_done as True
                self.round_done = True

                # send vote_msg to next leader
                send(('message',vote_msg), to=leader)
                # send response back to client
                send(('response_message', vote_msg), to=vote_msg.ledger_commit_info.client_request.client_id)

        elif type(message) == VoteMsg:
            
            proposal_msg = self.main.process_vote_message(message)

            if not proposal_msg:

                send(msg=('message',proposal_msg), to=nodes)

        elif type(message) == TimeOutMessage:

            proposal_msg = self.main.process_timeout_message(message) 

            if(not proposal_msg):
                
                send(msg=('message',proposal_msg), to=nodes)

def get_node_key_formatter(id: int):

    return 'node_id' + ' ' + str(id)

def main():

    nodes_count = int(sys.argv[1]) if len(sys.argv) > 1 else 3

    generate_keys = GenerateKeys()

    config(channel='fifo', clock = "lamport")

    replicas = new(Replica, num = nodes_count)

    node_to_public_key_mapper, node_to_key_mapper = dict(), dict()

    for i,r in enumerate(replicas):
        private_key, public_key = generate_keys.generate_key()
        node_to_public_key_mapper[get_node_key_formatter(i)] = public_key
        node_to_key_mapper[get_node_key_formatter(i)] = [private_key, public_key]
    
    for i,r in enumerate(replicas):
        
        node_id = get_node_key_formatter(i)

        setup(r, (replicas - {r}, node_id, node_to_public_key_mapper, node_to_key_mapper[node_id] ))
    
    start(replicas)
        




    
