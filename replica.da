from _typeshed import Self
import imp
from diembft.mem_pool.memPoolHelper import MemPoolHelper
from diembft import main as Main, messages
from diembft.messages import voteMsg
from diembft.pacemaker.pacemaker import Pacemaker
from diembft.utilities.generateKeys import GenerateKeys
from diembft.messages.proposalMsg import ProposalMsg
from diembft.messages.timeOutMessage import TimeOutMessage
from diembft.messages.voteMsg import VoteMsg

class Replica(process):

    def setup(nodes: set, node_id: str, mapper:dict, keys: list):

        self.mapper = mapper
        self.nodes = nodes  
        self.node_id = node_id
        self.mem_pool = MemPoolHelper()
        self.main = Main(
            self.mapper,
            self.nodes,
            self.node_id,
            keys,
            self.mem_pool
        )

    
    def run():
        pass

    def localTimeout():
        pass

    def recieve(msg=('client_message', client_message), from= _client_node):
        self.mem_pool.put_message(client_message)

    def receive(msg=('message',message), from = _node):
        if type(message) == ProposalMsg:
            vote_msg,leader = self.main.process_proposal_msg(message)
            send(('message',vote_msg), to=leader)
            send(('', vote_msg), to=vote_msg.ledger_commit_info.client_id)
        elif type(message) == VoteMsg:
            proposal_msg = self.main.process_vote_message(message)
            if(not proposal_msg):
                send(msg=('message',proposal_msg), to=nodes)
        elif type(message) == TimeOutMessage:
            proposal_msg = self.main.process_timeout_message(message) 
            if(not proposal_msg):
                send(msg=('message',proposal_msg), to=nodes)
        else: 

def main():

    
