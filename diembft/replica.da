from diembft.mem_pool.memPoolHelper import MemPoolHelper
import diembft.main as Main
from diembft.messages import voteMsg
from diembft.pacemaker.pacemaker import Pacemaker
from diembft.utilities.generateKeys import GenerateKeys
from diembft.messages.proposalMsg import ProposalMsg
from diembft.messages.timeOutMessage import TimeOutMessage
from diembft.messages.voteMsg import VoteMsg
    

class Replica(process):

    def setup(nodes: set, node_id: str, mapper:dict, keys: list, config, nodes_mapper: dict()):
        
        self.mem_pool = MemPoolHelper()
        self.mapper = mapper
        self.nodes = nodes  
        self.node_id = node_id
        output('Starting replica here ', node_id)
        self.main = Main(
            self.mapper,
            self.nodes,
            self.node_id,
            keys,
            config.timer_constant,
            self.mem_pool
        )
        self.round_done = False
        self.nodes_mapper = nodes_mapper

    
    def run():
        
        local_timeout()

    
    def local_timeout():
        
        run_done = False

        while not run_done:

            self.round_done = False

            timer_duration = self.main.pacemaker.get_round_timer(self.main.pacemaker.current_round) 

            if await(self.round_done):
                pass
            
            elif timeout(timer_duration):
                timeout_msg = self.main.pacemaker.local_timeout_round()
                # broadcast to all the nodes
                send(('message', timeout_msg), to = nodes)


    def receive(msg=('client_message', client_message), from_=client_node):
        #TODO: Encrypt and decrypt messages
        self.mem_pool.put_message(client_message)

    def receive(msg=('message',message), from_=node):

        if type(message) == ProposalMsg:

            vote_msg,leader = self.main.process_proposal_msg(message)

            if vote_msg is not None:

                #set round_done as True
                self.round_done = True

                # send vote_msg to next leader
                leader = self.nodes_mapper[leader]
                send(('message',vote_msg), to=leader)
                # send response back to client
                client = self.nodes_mapper[vote_msg.ledger_commit_info.client_request.client_id]
                send(('response_message', vote_msg), to=client)

        elif type(message) == VoteMsg:
            
            proposal_msg = self.main.process_vote_message(message)

            if not proposal_msg:

                send(('message',proposal_msg), to=nodes)

        elif type(message) == TimeOutMessage:

            proposal_msg = self.main.process_timeout_message(message) 

            if(not proposal_msg):
                
                send(('message',proposal_msg), to=nodes)


def main():

    output('I am Main')